/*
 * Configuring NPM
 *     Package Lockfiles
 */

console.log("\n-------------------------------------------------- 01");
{
  /*
   * 在理想情况下，当 package.json 没有变更时，多次执行安装操作所生成的依赖树也不会变更，
   * 在实际情况下，当 package.json 没有变更时，多次执行安装操作所生成的依赖树也会不一样，
   * 可能的原因有下面几个：
   *
   *     1. 不同的包管理器（npm，yarn），或者不同的版本，解析依赖包的方式可能不一样，
   *        导致最后生成的依赖树不一样，
   *
   *     2. 因为使用了 semver 版本方案，当依赖包有些的版本时，会自动安装符合要求的最新的版本，
   *
   *     3. 即使使用 semver 固定了依赖包的版本号（如 1.0.0），
   *        但是依赖包的依赖包，它的版本依然不会被固定，依然可能会自动安装新的版本，
   *
   *     4. 由于 registry 的问题，导致虽然安装的包的版本没有变更，但是包的内容已经变更了
   */
}

console.log("\n-------------------------------------------------- 02");
{
  /*
   * 有了 lockfile 之后，在执行安装操作时，真正执行的步骤时：
   *
   *     1. 不会再根据 package.json 来解析依赖，而是根据 package-lock.json 来解析依赖，
   *
   *     2. 在解析某个包时，首先会根据 resolved 属性对应的压缩包的地址来下载该包，
   *        如果没有 resolved 属性，则会根据 version 属性指定的版本，来重新解析该包
   *
   *     3. 当 package.json 中依赖的包有变更时，
   *        在 package-lock.json 中会自动进行同步更新
   */
}
